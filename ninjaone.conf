# ========================================
# NinjaOne RMM API Configuration
# Domain: ninjaone.jordan-s.org
# NinjaOne API Port: 3001 (NestJS)
# ========================================

# Upstream pour l'API NinjaOne
upstream ninjaone_api {
    server localhost:3001 fail_timeout=5s max_fails=3;
}

# HTTP - TEMPORAIRE: Pas de redirect pour les tests mobile
server {
    listen 80;
    listen [::]:80;
    server_name ninjaone.jordan-s.org;

    # Taille max des uploads
    client_max_body_size 50M;

    # Root location - NinjaOne API
    location / {
        # CORS headers are handled by NestJS backend
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;

        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Headers standards
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pas de cache pour l'API
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;

        # Timeouts
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root C:/nginx/html;
    }
}

# HTTPS Server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ninjaone.jordan-s.org;

    # SSL Certificate
    # TEMPORAIRE: Utilise le même certificat que sli.mobile.back.jordan-s.org
    # TODO: Générer un certificat dédié avec win-acme ou utiliser un wildcard *.jordan-s.org
    ssl_certificate ssl/ninjaone.jordan-s.org.crt;
    ssl_certificate_key ssl/ninjaone.jordan-s.org.key;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Taille max des uploads
    client_max_body_size 50M;

    # Root location - NinjaOne API
    location / {
        # CORS headers are handled by NestJS backend
        proxy_pass http://ninjaone_api;
        proxy_http_version 1.1;

        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Headers standards
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pas de cache pour l'API
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;

        # Timeouts
        proxy_read_timeout 60s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
    }

    # Health check
    location /health {
        access_log off;
        proxy_pass http://ninjaone_api/health;
    }

    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root C:/nginx/html;
    }

    # Logs
    access_log logs/ninjaone-access.log;
    error_log logs/ninjaone-error.log;
}
